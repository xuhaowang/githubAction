{"version":3,"sources":["routes.js","containers/Home/reducer.js","containers/TagPost/reducer.js","containers/Article/reducer.js","containers/Dashboard/reducer.js","App.js","store.js","reducers.js","registerServiceWorker.js","index.js","containers/Home/actionTypes.js","containers/TagPost/actionTypes.js","containers/Article/actionTypes.js","containers/Dashboard/actionTypes.js"],"names":["Loading","react_default","a","createElement","className","INITIAL_STATE","fromJS","postInfo","postCount","tagInfo","postList","total","loadMore","reducer","state","arguments","length","undefined","action","type","at","updateIn","data","map","t","update","resetState","curList","toJS","concat","posts","p","perPage","curPage","updateState","tagName","TagPost_reducer","resetStateForTagChange","message","postContent","Article_reducer","Dashboard_reducer","history","createHashHistory","store","asyncReducers","initialState","createStore","combineReducers","Object","objectSpread","home","tagPost","article","dashboard","routing","routerReducer","compose","applyMiddleware","thunk","routerMiddleware","f","configureStore","routes","path","component","Loadable","loader","Promise","all","__webpack_require__","e","then","bind","loading","exact","App","react_redux_es","react_router_dom_es","r","es","assign","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","d","__webpack_exports__","GET_POST_INFO","RESET_POST_LIST","FETCH_POST_LIST","SET_TAG_NAME","FETCH_TAG_POST_LIST","RESET_POST_CONTENT","FETCH_POST_CONTENT"],"mappings":"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","file":"static/js/main.c865f20d.chunk.js","sourcesContent":["import React from 'react';\nimport Loadable from 'react-loadable';\n\nconst Loading = () => <div className=\"page-loading\">Loading...</div>;\n\nexport const createRoutes = () => {\n  const home = {\n    path: '/',\n    component: Loadable({\n      loader: () => import('containers/Home'),\n      loading: Loading,\n    }),\n    exact: true,\n  };\n  const tagPost = {\n    path: '/tag/:tagName',\n    component: Loadable({\n      loader: () => import('containers/TagPost'),\n      loading: Loading,\n    }),\n    exact: true,\n  };\n  const article = {\n    path: '/post/:postName',\n    component: Loadable({\n      loader: () => import('containers/Article'),\n      loading: Loading,\n    }),\n    exact: true,\n  };\n\n  const dashboard = {\n    path: '/dashboard',\n    component: Loadable({\n      loader: () => import('containers/Dashboard'),\n      loading: Loading,\n    }),\n    exact: true,\n  };\n  // const dashboard_root = {\n  //   path: '/',\n  //   component: Loadable({\n  //     loader: () => import('containers/Dashboard'),\n  //     loading: Loading,\n  //   }),\n  //   exact: true,\n  // };\n  // const maskingDanmakuDemo = {\n  //   path: '/masking-danmaku-demo',\n  //   component: Loadable({\n  //     loader: () => import('containers/MaskingDanmakuDemo'),\n  //     loading: Loading,\n  //   }),\n  //   exact: true,\n  // };\n  return [home, tagPost, article, dashboard];\n};\n","import { fromJS } from 'immutable';\nimport * as at from './actionTypes';\n\nconst INITIAL_STATE = fromJS({\n  postInfo: {\n    postCount: 0,\n    tagInfo: [],\n  },\n  postList: [],\n  total: 0,\n  loadMore: true,\n});\n\nconst resetState = state =>\n  state\n    .update('postList', () => [])\n    .update('total', () => 0)\n    .update('loadMore', () => true);\n\nconst updateState = (state, data) => {\n  const curList = state.toJS().postList.concat(data.posts);\n\n  return state\n    .update('postList', postList => fromJS(curList.map(p => fromJS(p))))\n    .update('total', total => data.total)\n    .update(\n      'loadMore',\n      loadMore => (data.perPage * data.curPage >= data.total ? false : true)\n    );\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case at.GET_POST_INFO:\n      return state\n        .updateIn(['postInfo', 'postCount'], () => action.data.postCount)\n        .updateIn(['postInfo', 'tagInfo'], () =>\n          fromJS(action.data.tagInfo.map(t => fromJS(t)))\n        );\n    case at.RESET_POST_LIST:\n      return resetState(state);\n    case at.FETCH_POST_LIST:\n      return updateState(state, action.data);\n    default:\n      return state;\n  }\n};\n","import { fromJS } from 'immutable';\nimport * as at from './actionTypes';\n\nconst INITIAL_STATE = fromJS({\n  postInfo: {\n    postCount: 0,\n    tagInfo: [],\n  },\n  tagName: '',\n  postList: [],\n  total: 0,\n  loadMore: true,\n});\n\nconst resetStateForTagChange = (state, tagName) =>\n  state\n    .update('tagName', () => tagName)\n    .update('postList', () => [])\n    .update('total', () => 0)\n    .update('loadMore', () => true);\n\nconst updateState = (state, data) => {\n  const curList = state.toJS().postList.concat(data.posts);\n\n  return state\n    .update('postList', postList => fromJS(curList.map(p => fromJS(p))))\n    .update('total', total => data.total)\n    .update(\n      'loadMore',\n      loadMore => (data.perPage * data.curPage >= data.total ? false : true)\n    );\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case at.GET_POST_INFO:\n      return state\n        .updateIn(['postInfo', 'postCount'], () => action.data.postCount)\n        .updateIn(['postInfo', 'tagInfo'], () =>\n          fromJS(action.data.tagInfo.map(t => fromJS(t)))\n        );\n    case at.SET_TAG_NAME:\n      return resetStateForTagChange(state, action.message);\n    case at.FETCH_TAG_POST_LIST:\n      return updateState(state, action.data);\n    default:\n      return state;\n  }\n};\n","import { fromJS } from 'immutable';\nimport * as at from './actionTypes';\n\nconst INITIAL_STATE = fromJS({\n  postInfo: {\n    postCount: 0,\n    tagInfo: [],\n  },\n  postContent: {},\n});\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case at.GET_POST_INFO:\n      return state\n        .updateIn(['postInfo', 'postCount'], () => action.data.postCount)\n        .updateIn(['postInfo', 'tagInfo'], () =>\n          fromJS(action.data.tagInfo.map(t => fromJS(t)))\n        );\n    case at.RESET_POST_CONTENT:\n      return state.update('postContent', () => fromJS({}));\n    case at.FETCH_POST_CONTENT:\n      return state.update('postContent', () => fromJS(action.data));\n    default:\n      return state;\n  }\n};\n","import { fromJS } from 'immutable';\nimport * as at from './actionTypes';\n\nconst INITIAL_STATE = fromJS({\n  postInfo: {\n    postCount: 0,\n    tagInfo: [],\n  },\n  postList: [],\n  total: 0,\n  loadMore: true,\n});\n\nconst resetState = state =>\n  state\n    .update('postList', () => [])\n    .update('total', () => 0)\n    .update('loadMore', () => true);\n\nconst updateState = (state, data) => {\n  const curList = state.toJS().postList.concat(data.posts);\n\n  return state\n    .update('postList', postList => fromJS(curList.map(p => fromJS(p))))\n    .update('total', total => data.total)\n    .update(\n      'loadMore',\n      loadMore => (data.perPage * data.curPage >= data.total ? false : true)\n    );\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case at.GET_POST_INFO:\n      return state\n        .updateIn(['postInfo', 'postCount'], () => action.data.postCount)\n        .updateIn(['postInfo', 'tagInfo'], () =>\n          fromJS(action.data.tagInfo.map(t => fromJS(t)))\n        );\n    case at.RESET_POST_LIST:\n      return resetState(state);\n    case at.FETCH_POST_LIST:\n      return updateState(state, action.data);\n    default:\n      return state;\n  }\n};\n","import React, { Component } from 'react';\nimport { createBrowserHistory, createHashHistory } from 'history';\nimport { Route } from 'react-router';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { ConnectedHashRouter } from 'react-router-redux';\nimport { createRoutes } from 'routes';\nimport configureStore from 'store';\nimport 'normalize.css';\nimport 'github-markdown-css';\nimport 'antd/dist/antd.css';\nimport 'App.css';\n\n\nexport const history = createHashHistory();\nexport const store = configureStore(history, {});\nconst routes = createRoutes(store);\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <HashRouter history={history}>\n          <div className=\"app-container\">\n            {routes.map(r => \n              <Route key={r.path} {...r} />\n            )}\n          </div>\n        </HashRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import thunk from 'redux-thunk';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { routerMiddleware } from 'react-router-redux';\nimport createReducer from 'reducers';\n\nexport default (history, initialState = {}) => {\n  const store = createStore(\n    createReducer(),\n    initialState,\n    compose(\n      applyMiddleware(thunk, routerMiddleware(history)),\n      process.env.NODE_ENV === 'development' &&\n      typeof window === 'object' &&\n      typeof window.devToolsExtension !== 'undefined'\n        ? window.devToolsExtension()\n        : f => f\n    )\n  );\n\n  store.asyncReducers = {};\n\n  if (process.env.NODE_ENV === 'development') {\n    if (module.hot) {\n      module.hot.accept('./reducers', () =>\n        store.replaceReducer(createReducer())\n      );\n    }\n  }\n\n  return store;\n};\n","import { combineReducers } from 'redux';\nimport { routerReducer } from 'react-router-redux';\nimport home from 'containers/Home/reducer';\nimport tagPost from 'containers/TagPost/reducer';\nimport article from 'containers/Article/reducer';\nimport dashboard from 'containers/Dashboard/reducer';\n\nexport default asyncReducers =>\n  combineReducers({\n    home,\n    tagPost,\n    article,\n    dashboard,\n    routing: routerReducer,\n    ...asyncReducers,\n  });\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'core-js';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\nimport registerServiceWorker from 'registerServiceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./assets/css/animate.min.css\";\nimport \"./assets/sass/light-bootstrap-dashboard-react.scss?v=1.3.0\";\nimport \"./assets/css/demo.css\";\nimport \"./assets/css/pe-icon-7-stroke.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","export const GET_POST_INFO = 'get_post_info';\nexport const RESET_POST_LIST = 'reset_post_list';\nexport const FETCH_POST_LIST = 'fetch_post_list';\n","export const GET_POST_INFO = 'get_post_info';\nexport const SET_TAG_NAME = 'set_tag_name';\nexport const FETCH_TAG_POST_LIST = 'fetch_tag_post_list';\n","export const GET_POST_INFO = 'get_post_info';\nexport const RESET_POST_CONTENT = 'reset_post_content';\nexport const FETCH_POST_CONTENT = 'fetch_post_content';\n","export const GET_POST_INFO = 'get_post_info';\nexport const RESET_POST_LIST = 'reset_post_list';\nexport const FETCH_POST_LIST = 'fetch_post_list';\n"],"sourceRoot":""}